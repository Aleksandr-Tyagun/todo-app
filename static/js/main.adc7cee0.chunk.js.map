{"version":3,"sources":["constants/index.js","components/TodosFilter.js","components/TodoItem.js","components/TodoList.js","App.js","index.js"],"names":["FILTERS","TodosFilter","state","activeFilter","handleFilterChange","appliedFilter","filterTodoList","props","setState","this","todoList","handleClearCompleted","activeTodoCount","filter","completed","length","className","href","classNames","selected","onClick","type","Component","TodoItem","isEditing","newTitle","handleEditing","e","target","value","handleEditingBlur","id","setNewTitle","handleEditingKeyDown","key","trim","title","handleCompleteToggle","handleDeleteTodo","editing","onChange","checked","htmlFor","onDoubleClick","onBlur","onKeyDown","autoFocus","TodoList","map","PureComponent","App","newTodo","toggleAll","todoId","todo","handleNewTodoChange","handleNewTodoEnter","addNewTodo","uuidv4","filterName","setAll","val","previousSessionData","JSON","parse","localStorage","getItem","setItem","stringify","preparedTodos","onKeyUp","placeholder","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.adc7cee0.chunk.js","sourcesContent":["export const FILTERS = {\n  all: 'All',\n  completed: 'Completed',\n  active: 'Active',\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { FILTERS } from '../constants/index';\n\nclass TodosFilter extends Component {\n  state = {\n    activeFilter: FILTERS.all,\n  }\n\n  handleFilterChange = (appliedFilter) => {\n    const { filterTodoList } = this.props;\n\n    this.setState({\n      activeFilter: appliedFilter,\n    }, () => filterTodoList(appliedFilter));\n  }\n\n  render() {\n    const {\n      todoList,\n      handleClearCompleted,\n    } = this.props;\n\n    const { activeFilter } = this.state;\n\n    const activeTodoCount = (todoList\n      .filter(({ completed }) => !completed) || []\n    ).length;\n\n    return (\n      <footer className=\"footer\">\n        <span className=\"todo-count\">\n          {activeTodoCount}\n          {' '}\n          items left\n        </span>\n\n        <ul className=\"filters\">\n          <li>\n            <a\n              href=\"#/\"\n              className={classNames({ selected: activeFilter === FILTERS.all })}\n              onClick={() => this.handleFilterChange(FILTERS.all)}\n            >\n              All\n            </a>\n          </li>\n\n          <li>\n            <a\n              href=\"#/active\"\n              className={classNames({\n                selected: activeFilter === FILTERS.active,\n              })}\n              onClick={() => this.handleFilterChange(FILTERS.active)}\n            >\n              Active\n            </a>\n          </li>\n\n          <li>\n            <a\n              href=\"#/completed\"\n              className={classNames({\n                selected: activeFilter === FILTERS.completed,\n              })}\n              onClick={() => this.handleFilterChange(FILTERS.completed)}\n            >\n              Completed\n            </a>\n          </li>\n        </ul>\n\n        {todoList.length - activeTodoCount > 0 && (\n          <button\n            type=\"button\"\n            className=\"clear-completed\"\n            onClick={handleClearCompleted}\n          >\n            Clear completed\n          </button>\n        )}\n      </footer>\n    );\n  }\n}\n\nTodosFilter.propTypes = {\n  filterTodoList: PropTypes.func.isRequired,\n  handleClearCompleted: PropTypes.func.isRequired,\n  todoList: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  })).isRequired,\n};\n\nexport default TodosFilter;\n","/* eslint-disable jsx-a11y/no-autofocus */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nclass TodoItem extends Component {\n  state = {\n    isEditing: false,\n    newTitle: '',\n  }\n\n  handleEditing = (e) => {\n    this.setState({\n      newTitle: e.target.value,\n    });\n  }\n\n  handleEditingBlur = (e) => {\n    const {\n      id,\n      setNewTitle,\n    } = this.props;\n    const newTitle = e.target.value;\n\n    setNewTitle(id, newTitle);\n    this.setState({ isEditing: false });\n  }\n\n  handleEditingKeyDown = (e) => {\n    const {\n      id,\n      setNewTitle,\n    } = this.props;\n\n    const newTitle = e.target.value;\n\n    if (e.key === 'Enter') {\n      if (newTitle.trim().length === 0) {\n        this.setState({ isEditing: false });\n\n        return;\n      }\n\n      setNewTitle(id, newTitle);\n      this.setState({ isEditing: false });\n    }\n\n    if (e.key === 'Escape') {\n      this.setState({ isEditing: false });\n    }\n  }\n\n  render() {\n    const {\n      id,\n      title,\n      completed,\n      handleCompleteToggle,\n      handleDeleteTodo,\n    } = this.props;\n\n    const {\n      isEditing,\n      newTitle,\n    } = this.state;\n\n    return (\n      <li className={\n        classNames({\n          completed,\n          editing: isEditing,\n        })\n      }\n      >\n        <div className=\"view\">\n          <input\n            type=\"checkbox\"\n            className=\"toggle\"\n            onChange={() => handleCompleteToggle(id)}\n            checked={completed}\n          />\n          <label\n            htmlFor={`todo-${id}`}\n            onDoubleClick={() => this.setState({\n              isEditing: true,\n              newTitle: title,\n            })}\n          >\n            {title}\n          </label>\n          <button\n            type=\"button\"\n            className=\"destroy\"\n            onClick={() => handleDeleteTodo(id)}\n          />\n        </div>\n        {isEditing && (\n          <input\n            type=\"text\"\n            className=\"edit\"\n            value={newTitle}\n            onBlur={this.handleEditingBlur}\n            onChange={this.handleEditing}\n            onKeyDown={this.handleEditingKeyDown}\n            autoFocus\n          />\n        )}\n\n      </li>\n    );\n  }\n}\n\nTodoItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  completed: PropTypes.bool.isRequired,\n  setNewTitle: PropTypes.func.isRequired,\n  handleCompleteToggle: PropTypes.func.isRequired,\n  handleDeleteTodo: PropTypes.func.isRequired,\n};\n\nexport default TodoItem;\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport TodoItem from './TodoItem';\n\nclass TodoList extends PureComponent {\n  render() {\n    const {\n      todoList,\n      handleCompleteToggle,\n      handleDeleteTodo,\n      setNewTitle,\n    } = this.props;\n\n    return (\n\n      <ul className=\"todo-list\">\n        {todoList.map(({ id, title, completed }) => (\n          <TodoItem\n            key={id}\n            id={id}\n            title={title}\n            completed={completed}\n            handleCompleteToggle={handleCompleteToggle}\n            handleDeleteTodo={handleDeleteTodo}\n            setNewTitle={setNewTitle}\n          />\n        ))}\n      </ul>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todoList: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  })).isRequired,\n  handleCompleteToggle: PropTypes.func.isRequired,\n  handleDeleteTodo: PropTypes.func.isRequired,\n  setNewTitle: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n","import React, { Component } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { FILTERS } from './constants/index';\nimport TodosFilter from './components/TodosFilter';\nimport TodoList from './components/TodoList';\n\nclass App extends Component {\n  state = {\n    newTodo: '',\n    activeFilter: FILTERS.all,\n    toggleAll: false,\n    todoList: [],\n  }\n\n  componentDidMount() {\n    const previousSessionData = JSON.parse(localStorage.getItem('todoList'));\n\n    if (previousSessionData) {\n      this.setState({ todoList: previousSessionData });\n    }\n  }\n\n  componentDidUpdate() {\n    localStorage.setItem('todoList', JSON.stringify(this.state.todoList));\n  }\n\n  handleCompleteToggle = (todoId) => {\n    this.setState(state => ({\n      todoList: state.todoList.map((todo) => {\n        if (todo.id === todoId) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n  }\n\n  handleDeleteTodo = (todoId) => {\n    this.setState(state => ({\n      todoList: state.todoList.filter(todo => todo.id !== todoId),\n    }));\n  }\n\n  handleNewTodoChange = (e) => {\n    this.setState({\n      newTodo: e.target.value,\n    });\n  }\n\n  handleClearCompleted = () => {\n    this.setState(state => ({\n      todoList: state.todoList.filter(({ completed }) => !completed),\n    }));\n  }\n\n  handleNewTodoEnter = (e) => {\n    if (e.key === 'Enter') {\n      this.addNewTodo();\n    }\n  }\n\n  setNewTitle = (id, newTitle) => {\n    this.setState(state => ({\n      todoList: state.todoList.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            title: newTitle,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n  }\n\n  addNewTodo = () => {\n    if (this.state.newTodo.trim().length !== 0) {\n      this.setState(state => ({\n        todoList: [\n          ...state.todoList,\n          {\n            id: uuidv4(),\n            title: state.newTodo,\n            completed: false,\n          },\n        ],\n        newTodo: '',\n      }));\n    } else {\n      this.setState({ newTodo: '' });\n    }\n  }\n\n  filterTodoList = (filterName) => {\n    if (filterName === FILTERS.completed) {\n      this.setState({ activeFilter: FILTERS.completed });\n    }\n\n    if (filterName === FILTERS.active) {\n      this.setState({ activeFilter: FILTERS.active });\n    }\n\n    if (filterName === FILTERS.all) {\n      this.setState({ activeFilter: FILTERS.all });\n    }\n  }\n\n  setAll = (val) => {\n    this.setState(state => ({\n      todoList: state.todoList.map(todo => ({\n        ...todo,\n        completed: val,\n      })),\n      toggleAll: val,\n    }));\n  }\n\n  render() {\n    const {\n      todoList,\n      newTodo,\n      activeFilter,\n      toggleAll,\n    } = this.state;\n\n    const preparedTodos = todoList.filter((todo) => {\n      if (activeFilter === FILTERS.active) {\n        return !todo.completed;\n      }\n\n      if (activeFilter === FILTERS.completed) {\n        return todo.completed;\n      }\n\n      return todo;\n    });\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <input\n            value={newTodo}\n            onChange={this.handleNewTodoChange}\n            onBlur={this.addNewTodo}\n            onKeyUp={this.handleNewTodoEnter}\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n          />\n        </header>\n        <section className=\"main\">\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            onChange={() => this.setAll(!toggleAll)}\n            checked={toggleAll}\n          />\n          <label htmlFor=\"toggle-all\">\n            Mark all as complete\n          </label>\n          <TodoList\n            todoList={preparedTodos}\n            handleCompleteToggle={this.handleCompleteToggle}\n            handleDeleteTodo={this.handleDeleteTodo}\n            setNewTitle={this.setNewTitle}\n          />\n        </section>\n        {todoList.length > 0 && (\n          <TodosFilter\n            todoList={todoList}\n            filterTodoList={this.filterTodoList}\n            handleClearCompleted={this.handleClearCompleted}\n          />\n        )}\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}